length()
#Finding Which Loans were approved and hadn't met credit history guidelines
poor_credit <- data_sub %>%
filter(Loan_Status == "Y" & Credit_History == "No")
poor_credit
#Finding Which Loans were approved and hadn't met credit history guidelines
poor_credit <- data_sub %>%
filter(Loan_Status == "Y" & Credit_History == "No")
summary(poor_credit)
poor_credit
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
library(caret)
library(VIM)
data <- read.csv("train-file.csv")
str(data)
head(data)
summary(data)
table(data$Loan_Amount_Term)
table(data$Credit_History)
#Creating Factor Variables
data$Loan_Amount_Term <- factor(data$Loan_Amount_Term)
data$Credit_History <- factor(data$Credit_History, labels = c("No", "Yes"))
data_sub <- data %>%
select(-Loan_ID)
#Using kNN imputation
data_sub <- kNN(data_sub)
#Removing Variables Created by Imputation
data_sub <- data_sub %>%
select(-(Gender_imp:Loan_Status_imp))
summary(data_sub)
#Finding Which Loans were approved and hadn't met credit history guidelines
poor_credit <- data_sub %>%
filter(Loan_Status == "Y" & Credit_History == "No")
summary(poor_credit)
#Finding Which Loans were approved and hadn't met credit history guidelines
poor_credit <- data_sub %>%
filter(Loan_Status == "Y" & Credit_History == "No")
summary(poor_credit)
ggplot(poor_credit, aes(x=ApplicantIncome, y = LoanAmount)) +
geom_point()
#Finding Which Loans were approved and hadn't met credit history guidelines
poor_credit <- data_sub %>%
filter(Loan_Status == "Y" & Credit_History == "No")
summary(poor_credit)
ggplot(poor_credit, aes(x=ApplicantIncome, y = LoanAmount)) +
geom_point()
ggplot(data_sub, aes(x=CoapplicantIncome, y = LoanAmount, col = Loan_Status)) +
geom_jitter(alpha = 0.7) +
facet_grid(. ~ Credit_History) +
labs(title = "Loan Amount by Coapplicant Income and Credit History",
x = "Coapplicant Income", y = "Loan Amount (Thousands)")
#Finding Which Loans were approved and hadn't met credit history guidelines
poor_credit <- data_sub %>%
filter(Loan_Status == "Y" & Credit_History == "No")
summary(poor_credit)
ggplot(poor_credit, aes(x=ApplicantIncome, y = LoanAmount)) +
geom_point() +
labs(title = "Poor Credit but Approved", x= "Applicant Income",
y= "Loan Amount (Thousands)")
good_credit <- data_sub %>%
filter(Loan_Status == "N" & Credit_History == "Yes")
summary(good_credit)
good_credit <- data_sub %>%
filter(Loan_Status == "N" & Credit_History == "Yes")
ggplot(good_credit, aes(x=ApplicantIncome, y=LoanAmount)) +
geom_point()
inTrain <- createDataPartition(y = data_sub$Loan_Status, p = 0.8, list=FALSE)
train <- data_sub[inTrain, ]
test <- data_sub[-inTrain, ]
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
weights = train$Credit_History,
trControl = trainControl(method = "cv",
number = 10, repeats = 10))
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
weights = train$ApplicantIncome,
trControl = trainControl(method = "cv",
number = 10, repeats = 10))
model_rf
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
weights = train$ApplicantIncome,
trControl = trainControl(method = "cv",
number = 10))
model_rf
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
weights = train$ApplicantIncome,
trControl = trainControl(method = "cv",
number = 10))
model_rf
predictions_rf <- predict(model_rf, test)
confusionMatrix(predictions_rf, test$Loan_Status)
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
trControl = trainControl(method = "cv",
number = 10))
model_rf
predictions_rf <- predict(model_rf, test)
confusionMatrix(predictions_rf, test$Loan_Status)
predictions_rf <- predict(model_rf, test)
confusionMatrix(predictions_rf, test$Loan_Status)
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
weights = train$Credit_History,
trControl = trainControl(method = "cv",
number = 10))
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
weights = as.numeric(train$Credit_History),
trControl = trainControl(method = "cv",
number = 10))
model_rf
predictions_rf <- predict(model_rf, test)
confusionMatrix(predictions_rf, test$Loan_Status)
inTrain <- createDataPartition(y = data_sub$Loan_Status, p = 0.7, list=FALSE)
train <- data_sub[inTrain, ]
test <- data_sub[-inTrain, ]
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
weights = as.numeric(train$Credit_History),
trControl = trainControl(method = "cv",
number = 10))
model_rf
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
preProcess = c("center", "scale"),
tuneLength = 7,
weights = as.numeric(train$Credit_History),
trControl = trainControl(method = "cv",
number = 10))
model_rf
predictions_rf <- predict(model_rf, test)
confusionMatrix(predictions_rf, test$Loan_Status)
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
preProcess = c("center", "scale"),
tuneLength = 7,
weights = as.numeric(train$Credit_History),
trControl = trainControl(method = "cv",
number = 10))
model_rf
predictions_rf <- predict(model_rf, test)
confusionMatrix(predictions_rf, test$Loan_Status)
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
preProcess = c("center", "scale"),
tuneLength = 10,
weights = as.numeric(train$Credit_History),
trControl = trainControl(method = "cv",
number = 10))
model_rf
predictions_rf <- predict(model_rf, test)
confusionMatrix(predictions_rf, test$Loan_Status)
predictions_rf <- predict(model_rf, test)
confusionMatrix(predictions_rf, test$Loan_Status)
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
preProcess = c("center", "scale"),
tuneLength = 11,
weights = as.numeric(train$Credit_History),
trControl = trainControl(method = "cv",
number = 10))
model_rf
predictions_rf <- predict(model_rf, test)
confusionMatrix(predictions_rf, test$Loan_Status)
predictions_rf <- predict(model_rf, test)
confusionMatrix(predictions_rf, test$Loan_Status)
predictions_rf <- predict(model_rf, test)
confusionMatrix(predictions_rf, test$Loan_Status)
model_c5 <- train(Loan_Status ~ ., train,
method = "C5.0",
preProcess = c("center", "scale"),
tuneLength = 11,
weights = as.numeric(train$Credit_History),
trControl = trainControl(method = "cv",
number = 10))
model_c5 <- train(Loan_Status ~ ., train,
method = "gbm",
preProcess = c("center", "scale"),
tuneLength = 11,
weights = as.numeric(train$Credit_History),
trControl = trainControl(method = "cv",
number = 10))
model_c5 <- train(Loan_Status ~ ., train,
method = "treebag",
preProcess = c("center", "scale"),
tuneLength = 11,
weights = as.numeric(train$Credit_History),
trControl = trainControl(method = "cv",
number = 10))
model_c5
predictions_bag <- predict(model_bag, test)
model_bag <- train(Loan_Status ~ ., train,
method = "treebag",
preProcess = c("center", "scale"),
tuneLength = 11,
weights = as.numeric(train$Credit_History),
trControl = trainControl(method = "cv",
number = 10))
model_bag
predictions_bag <- predict(model_bag, test)
confusionMatrix(predictions_bag, test$Loan_Status)
predictions_bag <- predict(model_bag, test)
confusionMatrix(predictions_bag, test$Loan_Status)
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
preProcess = c("center", "scale"),
tuneLength = 11,
trControl = trainControl(method = "cv",
number = 10))
model_rf
predictions_rf <- predict(model_rf, test)
confusionMatrix(predictions_rf, test$Loan_Status)
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
preProcess = c("center", "scale"),
tuneLength = 11,
trControl = trainControl(method = "cv",
number = 10, repeats = 10))
model_rf
predictions_rf <- predict(model_rf, test)
confusionMatrix(predictions_rf, test$Loan_Status)
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
preProcess = c("center", "scale"),
tuneLength = 11,
weights = as.numeric(train$Credit_History),
trControl = trainControl(method = "cv",
number = 10, repeats = 10))
model_rf
predictions_rf <- predict(model_rf, test)
confusionMatrix(predictions_rf, test$Loan_Status)
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
preProcess = c("center", "scale"),
tuneLength = 11,
trControl = trainControl(method = "cv",
number = 10, repeats = 10))
model_rf
predictions_rf <- predict(model_rf, test)
confusionMatrix(predictions_rf, test$Loan_Status)
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
preProcess = c("center", "scale"),
tuneLength = 11,
weights = as.numeric(train$Credit_History),
trControl = trainControl(method = "cv",
number = 10, repeats = 10))
model_rf
predictions_rf <- predict(model_rf, test)
confusionMatrix(predictions_rf, test$Loan_Status)
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
preProcess = c("center", "scale"),
tuneLength = 11,
weights = as.numeric(train$Credit_History),
trControl = trainControl(method = "cv",
number = 10))
wait
set.seed(366284)
inTrain <- createDataPartition(y = data_sub$Loan_Status, p = 0.7, list=FALSE)
train <- data_sub[inTrain, ]
test <- data_sub[-inTrain, ]
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
preProcess = c("center", "scale"),
tuneLength = 11,
weights = as.numeric(train$Credit_History),
trControl = trainControl(method = "cv",
number = 10))
model_rf
predictions_rf <- predict(model_rf, test)
confusionMatrix(predictions_rf, test$Loan_Status)
final_test  <- read.csv("test-file.csv", header = TRUE)
final_test$Loan_Amount_Term <- factor(final_test$Loan_Amount_Term)
final_test$Credit_History <- factor(final_test$Credit_History, labels = c("No", "Yes"))
predictions_rf <- predict(model_rf, final_test)
final_test  <- read.csv("test-file.csv", header = TRUE)
predictions_rf <- predict(model_rf, final_test)
final_test  <- read.csv("test-file.csv", header = TRUE)
final_test$Loan_Amount_Term <- factor(final_test$Loan_Amount_Term)
final_test$Credit_History <- factor(final_test$Credit_History, labels = c("No", "Yes"))
predictions_rf <- predict(model_rf, final_test)
#Creating Factor Variables
data$Credit_History <- factor(data$Credit_History, labels = c("No", "Yes"))
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
library(caret)
library(VIM)
data <- read.csv("train-file.csv")
str(data)
#Creating Factor Variables
data$Credit_History <- factor(data$Credit_History, labels = c("No", "Yes"))
data_sub <- data %>%
select(-Loan_ID)
#Using kNN imputation
data_sub <- kNN(data_sub)
#Removing Variables Created by Imputation
data_sub <- data_sub %>%
select(-(Gender_imp:Loan_Status_imp))
set.seed(366284)
inTrain <- createDataPartition(y = data_sub$Loan_Status, p = 0.7, list=FALSE)
train <- data_sub[inTrain, ]
test <- data_sub[-inTrain, ]
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
preProcess = c("center", "scale"),
tuneLength = 11,
weights = as.numeric(train$Credit_History),
trControl = trainControl(method = "cv",
number = 10))
model_rf
predictions_rf <- predict(model_rf, test)
confusionMatrix(predictions_rf, test$Loan_Status)
final_test  <- read.csv("test-file.csv", header = TRUE)
final_test$Credit_History <- factor(final_test$Credit_History, labels = c("No", "Yes"))
predictions_rf <- predict(model_rf, final_test)
final_test$Survived <- predictions_rf
final_test  <- read.csv("test-file.csv", header = TRUE)
final_test$Credit_History <- factor(final_test$Credit_History, labels = c("No", "Yes"))
predictions_rf <- predict(model_rf, final_test)
final_test$Loan_Status <- predictions_rf
final_test  <- read.csv("test-file.csv", header = TRUE)
final_test$Credit_History <- factor(final_test$Credit_History, labels = c("No", "Yes"))
final_test <- kNN(final_test)
#Removing Variables Created by Imputation
final_test <- final_test %>%
select(-(Gender_imp:Loan_Status_imp))
names(final_test)
final_test  <- read.csv("test-file.csv", header = TRUE)
final_test$Credit_History <- factor(final_test$Credit_History, labels = c("No", "Yes"))
final_test <- kNN(final_test)
#Removing Variables Created by Imputation
final_test <- final_test %>%
select(-(Gender_imp:Property_Area_imp))
predictions_rf <- predict(model_rf, final_test)
final_test$Loan_Status <- predictions_rf
dim(final_test)
final_test  <- read.csv("test-file.csv", header = TRUE)
final_test$Credit_History <- factor(final_test$Credit_History, labels = c("No", "Yes"))
final_test <- kNN(final_test)
#Removing Variables Created by Imputation
final_test <- final_test %>%
select(-(Gender_imp:Property_Area_imp))
predictions_rf <- predict(model_rf, final_test)
final_test$Loan_Status <- predictions_rf
dim(final_test)
submission_rf <- final_test[, c("Loan_ID", "Loan_Status")]
write.csv(submission_rf, "loan_rf_predictions.csv", row.names = FALSE)
final_test  <- read.csv("test-file.csv", header = TRUE)
dim(final_test)
final_test  <- read.csv("test-file.csv", header = TRUE)
final_test$Credit_History <- factor(final_test$Credit_History, labels = c("No", "Yes"))
final_test <- kNN(final_test)
#Removing Variables Created by Imputation
final_test <- final_test %>%
select(-(Gender_imp:Property_Area_imp))
predictions_rf <- predict(model_rf, final_test)
final_test$Loan_Status <- predictions_rf
dim(final_test)
submission_rf <- final_test[, c("Loan_ID", "Loan_Status")]
write.csv(submission_rf, "loan_rf_predictions.csv", row.names = FALSE)
str(final_test)
glimpse(final_test)
final_test  <- read.csv("test-file.csv", header = TRUE)
final_test$Credit_History <- factor(final_test$Credit_History, labels = c("No", "Yes"))
final_test <- kNN(final_test)
#Removing Variables Created by Imputation
final_test <- final_test %>%
select(-(Gender_imp:Loan_ID_imp))
predictions_rf <- predict(model_rf, final_test)
final_test$Loan_Status <- predictions_rf
dim(final_test)
submission_rf <- final_test[, c("Loan_ID", "Loan_Status")]
write.csv(submission_rf, "loan_rf_predictions.csv", row.names = FALSE)
final_test  <- read.csv("test-file.csv", header = TRUE)
final_test$Credit_History <- factor(final_test$Credit_History, labels = c("No", "Yes"))
final_test <- kNN(final_test)
#Removing Variables Created by Imputation
final_test <- final_test %>%
select(-(Loan_ID_imp))
predictions_rf <- predict(model_rf, final_test)
final_test$Loan_Status <- predictions_rf
dim(final_test)
submission_rf <- final_test[, c("Loan_ID", "Loan_Status")]
write.csv(submission_rf, "loan_rf_predictions.csv", row.names = FALSE)
final_test  <- read.csv("test-file.csv", header = TRUE)
final_test$Credit_History <- factor(final_test$Credit_History, labels = c("No", "Yes"))
final_test <- kNN(final_test)
names(final_test)
final_test  <- read.csv("test-file.csv", header = TRUE)
final_test$Credit_History <- factor(final_test$Credit_History, labels = c("No", "Yes"))
final_test <- kNN(final_test)
#Removing Variables Created by Imputation
final_test <- final_test %>%
select(-(Loan_ID_imp:Property_Area_Imp))
final_test  <- read.csv("test-file.csv", header = TRUE)
final_test$Credit_History <- factor(final_test$Credit_History, labels = c("No", "Yes"))
final_test <- kNN(final_test)
names(final_test)
final_test  <- read.csv("test-file.csv", header = TRUE)
final_test$Credit_History <- factor(final_test$Credit_History, labels = c("No", "Yes"))
final_test <- kNN(final_test)
#Removing Variables Created by Imputation
final_test <- final_test %>%
select(-(Loan_ID_imp:Property_Area_imp))
predictions_rf <- predict(model_rf, final_test)
final_test$Loan_Status <- predictions_rf
dim(final_test)
submission_rf <- final_test[, c("Loan_ID", "Loan_Status")]
write.csv(submission_rf, "loan_rf_predictions.csv", row.names = FALSE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
library(caret)
library(VIM)
data <- read.csv("train-file.csv")
str(data)
head(data)
summary(data)
table(data$Loan_Amount_Term)
table(data$Credit_History)
#Creating Factor Variables
data$Credit_History <- factor(data$Credit_History, labels = c("No", "Yes"))
data_sub <- data %>%
select(-Loan_ID)
#Using kNN imputation
data_sub <- kNN(data_sub)
#Removing Variables Created by Imputation
data_sub <- data_sub %>%
select(-(Gender_imp:Loan_Status_imp))
summary(data_sub)
ggplot(data_sub, aes(x=ApplicantIncome, y = LoanAmount, col = Loan_Status)) +
geom_jitter(alpha = 0.7) +
facet_grid(. ~ Credit_History) +
labs(title = "Loan Amount by Applicant Income and Credit History",
x = "Applicant Income", y = "Loan Amount (Thousands)")
ggplot(data_sub, aes(x=CoapplicantIncome, y = LoanAmount, col = Loan_Status)) +
geom_jitter(alpha = 0.7) +
facet_grid(. ~ Credit_History) +
labs(title = "Loan Amount by Coapplicant Income and Credit History",
x = "Coapplicant Income", y = "Loan Amount (Thousands)")
hist_loan <- ggplot(data_sub, aes(x=LoanAmount, fill=Loan_Status)) +
geom_histogram() +
labs(title="Histogram of Loan Amount by Loan Status",
x="Loan Amount")
hist_income <- ggplot(data_sub, aes(x=ApplicantIncome, fill=Loan_Status)) +
geom_histogram() +
labs(title="Histogram of Applicant Income by Status",
x = "Applicant Income")
grid.arrange(hist_loan, hist_income, nrow = 2)
#Finding Which Loans were approved and hadn't met credit history guidelines
poor_credit <- data_sub %>%
filter(Loan_Status == "Y" & Credit_History == "No")
summary(poor_credit)
ggplot(poor_credit, aes(x=ApplicantIncome, y = LoanAmount)) +
geom_point() +
labs(title = "Poor Credit but Approved", x= "Applicant Income",
y= "Loan Amount (Thousands)")
set.seed(366284)
inTrain <- createDataPartition(y = data_sub$Loan_Status, p = 0.7, list=FALSE)
train <- data_sub[inTrain, ]
test <- data_sub[-inTrain, ]
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
preProcess = c("center", "scale"),
tuneLength = 11,
weights = as.numeric(train$Credit_History),
trControl = trainControl(method = "cv",
number = 10))
model_rf
predictions_rf <- predict(model_rf, test)
confusionMatrix(predictions_rf, test$Loan_Status)
model_bag <- train(Loan_Status ~ ., train,
method = "treebag",
preProcess = c("center", "scale"),
tuneLength = 11,
weights = as.numeric(train$Credit_History),
trControl = trainControl(method = "cv",
number = 10))
model_bag
predictions_bag <- predict(model_bag, test)
confusionMatrix(predictions_bag, test$Loan_Status)
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
preProcess = c("center", "scale"),
tuneLength = 11,
weights = c(as.numeric(train$Credit_History), as.numeric(train$Property_Area)),
trControl = trainControl(method = "cv",
number = 10))
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
preProcess = c("center", "scale"),
tuneLength = 11,
weights = c(as.numeric(train$Credit_History), train$Property_Area),
trControl = trainControl(method = "cv",
number = 10))
model_rf <- train(Loan_Status ~ ., train,
method = "ranger",
preProcess = c("center", "scale"),
tuneLength = 11,
weights = as.numeric(train$Credit_History),
trControl = trainControl(method = "cv",
number = 10))
